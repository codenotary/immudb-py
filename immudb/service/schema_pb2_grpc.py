# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
from immudb.schema import schema_pb2 as schema__pb2

class ImmuServiceStub(object):
    """option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
    	info: {
    		title: "immudb REST API";
    		description: "<b>IMPORTANT</b>: All <code>get</code> and <code>safeget</code> functions return <u>base64-encoded</u> keys and values, while all <code>set</code> and <code>safeset</code> functions expect <u>base64-encoded</u> inputs."
    	};
    	security_definitions: {
    		security: {
    			key: "bearer"
    			value: {
    				type: TYPE_API_KEY
    				in: IN_HEADER
    				name: "Authorization"
    				description: "Authentication token, prefixed by Bearer: Bearer <token>"
    			}
    		}
    	}
    	security: {
    		security_requirement: {
    			key: "bearer"
    		}
    	}
    };

    immudb gRPC & REST service
    IMPORTANT: All get and safeget functions return base64-encoded keys and values, while all set and safeset functions expect base64-encoded inputs.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ListUsers = channel.unary_unary(
                '/immudb.schema.ImmuService/ListUsers',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=schema__pb2.UserList.FromString,
                )
        self.CreateUser = channel.unary_unary(
                '/immudb.schema.ImmuService/CreateUser',
                request_serializer=schema__pb2.CreateUserRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.ChangePassword = channel.unary_unary(
                '/immudb.schema.ImmuService/ChangePassword',
                request_serializer=schema__pb2.ChangePasswordRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.UpdateAuthConfig = channel.unary_unary(
                '/immudb.schema.ImmuService/UpdateAuthConfig',
                request_serializer=schema__pb2.AuthConfig.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.UpdateMTLSConfig = channel.unary_unary(
                '/immudb.schema.ImmuService/UpdateMTLSConfig',
                request_serializer=schema__pb2.MTLSConfig.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.PrintTree = channel.unary_unary(
                '/immudb.schema.ImmuService/PrintTree',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=schema__pb2.Tree.FromString,
                )
        self.Login = channel.unary_unary(
                '/immudb.schema.ImmuService/Login',
                request_serializer=schema__pb2.LoginRequest.SerializeToString,
                response_deserializer=schema__pb2.LoginResponse.FromString,
                )
        self.Logout = channel.unary_unary(
                '/immudb.schema.ImmuService/Logout',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.Set = channel.unary_unary(
                '/immudb.schema.ImmuService/Set',
                request_serializer=schema__pb2.KeyValue.SerializeToString,
                response_deserializer=schema__pb2.Index.FromString,
                )
        self.SetSV = channel.unary_unary(
                '/immudb.schema.ImmuService/SetSV',
                request_serializer=schema__pb2.StructuredKeyValue.SerializeToString,
                response_deserializer=schema__pb2.Index.FromString,
                )
        self.SafeSet = channel.unary_unary(
                '/immudb.schema.ImmuService/SafeSet',
                request_serializer=schema__pb2.SafeSetOptions.SerializeToString,
                response_deserializer=schema__pb2.Proof.FromString,
                )
        self.SafeSetSV = channel.unary_unary(
                '/immudb.schema.ImmuService/SafeSetSV',
                request_serializer=schema__pb2.SafeSetSVOptions.SerializeToString,
                response_deserializer=schema__pb2.Proof.FromString,
                )
        self.Get = channel.unary_unary(
                '/immudb.schema.ImmuService/Get',
                request_serializer=schema__pb2.Key.SerializeToString,
                response_deserializer=schema__pb2.Item.FromString,
                )
        self.GetSV = channel.unary_unary(
                '/immudb.schema.ImmuService/GetSV',
                request_serializer=schema__pb2.Key.SerializeToString,
                response_deserializer=schema__pb2.StructuredItem.FromString,
                )
        self.SafeGet = channel.unary_unary(
                '/immudb.schema.ImmuService/SafeGet',
                request_serializer=schema__pb2.SafeGetOptions.SerializeToString,
                response_deserializer=schema__pb2.SafeItem.FromString,
                )
        self.SafeGetSV = channel.unary_unary(
                '/immudb.schema.ImmuService/SafeGetSV',
                request_serializer=schema__pb2.SafeGetOptions.SerializeToString,
                response_deserializer=schema__pb2.SafeStructuredItem.FromString,
                )
        self.SetBatch = channel.unary_unary(
                '/immudb.schema.ImmuService/SetBatch',
                request_serializer=schema__pb2.KVList.SerializeToString,
                response_deserializer=schema__pb2.Index.FromString,
                )
        self.SetBatchSV = channel.unary_unary(
                '/immudb.schema.ImmuService/SetBatchSV',
                request_serializer=schema__pb2.SKVList.SerializeToString,
                response_deserializer=schema__pb2.Index.FromString,
                )
        self.GetBatch = channel.unary_unary(
                '/immudb.schema.ImmuService/GetBatch',
                request_serializer=schema__pb2.KeyList.SerializeToString,
                response_deserializer=schema__pb2.ItemList.FromString,
                )
        self.GetBatchSV = channel.unary_unary(
                '/immudb.schema.ImmuService/GetBatchSV',
                request_serializer=schema__pb2.KeyList.SerializeToString,
                response_deserializer=schema__pb2.StructuredItemList.FromString,
                )
        self.Scan = channel.unary_unary(
                '/immudb.schema.ImmuService/Scan',
                request_serializer=schema__pb2.ScanOptions.SerializeToString,
                response_deserializer=schema__pb2.ItemList.FromString,
                )
        self.ScanSV = channel.unary_unary(
                '/immudb.schema.ImmuService/ScanSV',
                request_serializer=schema__pb2.ScanOptions.SerializeToString,
                response_deserializer=schema__pb2.StructuredItemList.FromString,
                )
        self.Count = channel.unary_unary(
                '/immudb.schema.ImmuService/Count',
                request_serializer=schema__pb2.KeyPrefix.SerializeToString,
                response_deserializer=schema__pb2.ItemsCount.FromString,
                )
        self.CurrentRoot = channel.unary_unary(
                '/immudb.schema.ImmuService/CurrentRoot',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=schema__pb2.Root.FromString,
                )
        self.Inclusion = channel.unary_unary(
                '/immudb.schema.ImmuService/Inclusion',
                request_serializer=schema__pb2.Index.SerializeToString,
                response_deserializer=schema__pb2.InclusionProof.FromString,
                )
        self.Consistency = channel.unary_unary(
                '/immudb.schema.ImmuService/Consistency',
                request_serializer=schema__pb2.Index.SerializeToString,
                response_deserializer=schema__pb2.ConsistencyProof.FromString,
                )
        self.ByIndex = channel.unary_unary(
                '/immudb.schema.ImmuService/ByIndex',
                request_serializer=schema__pb2.Index.SerializeToString,
                response_deserializer=schema__pb2.Item.FromString,
                )
        self.BySafeIndex = channel.unary_unary(
                '/immudb.schema.ImmuService/BySafeIndex',
                request_serializer=schema__pb2.SafeIndexOptions.SerializeToString,
                response_deserializer=schema__pb2.SafeItem.FromString,
                )
        self.ByIndexSV = channel.unary_unary(
                '/immudb.schema.ImmuService/ByIndexSV',
                request_serializer=schema__pb2.Index.SerializeToString,
                response_deserializer=schema__pb2.StructuredItem.FromString,
                )
        self.History = channel.unary_unary(
                '/immudb.schema.ImmuService/History',
                request_serializer=schema__pb2.Key.SerializeToString,
                response_deserializer=schema__pb2.ItemList.FromString,
                )
        self.HistorySV = channel.unary_unary(
                '/immudb.schema.ImmuService/HistorySV',
                request_serializer=schema__pb2.Key.SerializeToString,
                response_deserializer=schema__pb2.StructuredItemList.FromString,
                )
        self.Health = channel.unary_unary(
                '/immudb.schema.ImmuService/Health',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=schema__pb2.HealthResponse.FromString,
                )
        self.Reference = channel.unary_unary(
                '/immudb.schema.ImmuService/Reference',
                request_serializer=schema__pb2.ReferenceOptions.SerializeToString,
                response_deserializer=schema__pb2.Index.FromString,
                )
        self.SafeReference = channel.unary_unary(
                '/immudb.schema.ImmuService/SafeReference',
                request_serializer=schema__pb2.SafeReferenceOptions.SerializeToString,
                response_deserializer=schema__pb2.Proof.FromString,
                )
        self.ZAdd = channel.unary_unary(
                '/immudb.schema.ImmuService/ZAdd',
                request_serializer=schema__pb2.ZAddOptions.SerializeToString,
                response_deserializer=schema__pb2.Index.FromString,
                )
        self.ZScan = channel.unary_unary(
                '/immudb.schema.ImmuService/ZScan',
                request_serializer=schema__pb2.ZScanOptions.SerializeToString,
                response_deserializer=schema__pb2.ItemList.FromString,
                )
        self.ZScanSV = channel.unary_unary(
                '/immudb.schema.ImmuService/ZScanSV',
                request_serializer=schema__pb2.ZScanOptions.SerializeToString,
                response_deserializer=schema__pb2.StructuredItemList.FromString,
                )
        self.SafeZAdd = channel.unary_unary(
                '/immudb.schema.ImmuService/SafeZAdd',
                request_serializer=schema__pb2.SafeZAddOptions.SerializeToString,
                response_deserializer=schema__pb2.Proof.FromString,
                )
        self.IScan = channel.unary_unary(
                '/immudb.schema.ImmuService/IScan',
                request_serializer=schema__pb2.IScanOptions.SerializeToString,
                response_deserializer=schema__pb2.Page.FromString,
                )
        self.IScanSV = channel.unary_unary(
                '/immudb.schema.ImmuService/IScanSV',
                request_serializer=schema__pb2.IScanOptions.SerializeToString,
                response_deserializer=schema__pb2.SPage.FromString,
                )
        self.Dump = channel.unary_stream(
                '/immudb.schema.ImmuService/Dump',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=schema__pb2.KVList.FromString,
                )
        self.CreateDatabase = channel.unary_unary(
                '/immudb.schema.ImmuService/CreateDatabase',
                request_serializer=schema__pb2.Database.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.UseDatabase = channel.unary_unary(
                '/immudb.schema.ImmuService/UseDatabase',
                request_serializer=schema__pb2.Database.SerializeToString,
                response_deserializer=schema__pb2.UseDatabaseReply.FromString,
                )
        self.ChangePermission = channel.unary_unary(
                '/immudb.schema.ImmuService/ChangePermission',
                request_serializer=schema__pb2.ChangePermissionRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.SetActiveUser = channel.unary_unary(
                '/immudb.schema.ImmuService/SetActiveUser',
                request_serializer=schema__pb2.SetActiveUserRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.DatabaseList = channel.unary_unary(
                '/immudb.schema.ImmuService/DatabaseList',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=schema__pb2.DatabaseListResponse.FromString,
                )


class ImmuServiceServicer(object):
    """option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
    	info: {
    		title: "immudb REST API";
    		description: "<b>IMPORTANT</b>: All <code>get</code> and <code>safeget</code> functions return <u>base64-encoded</u> keys and values, while all <code>set</code> and <code>safeset</code> functions expect <u>base64-encoded</u> inputs."
    	};
    	security_definitions: {
    		security: {
    			key: "bearer"
    			value: {
    				type: TYPE_API_KEY
    				in: IN_HEADER
    				name: "Authorization"
    				description: "Authentication token, prefixed by Bearer: Bearer <token>"
    			}
    		}
    	}
    	security: {
    		security_requirement: {
    			key: "bearer"
    		}
    	}
    };

    immudb gRPC & REST service
    IMPORTANT: All get and safeget functions return base64-encoded keys and values, while all set and safeset functions expect base64-encoded inputs.
    """

    def ListUsers(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ChangePassword(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateAuthConfig(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateMTLSConfig(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PrintTree(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Login(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Logout(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Set(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetSV(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SafeSet(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SafeSetSV(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Get(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSV(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SafeGet(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SafeGetSV(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetBatch(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetBatchSV(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetBatch(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetBatchSV(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Scan(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ScanSV(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Count(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CurrentRoot(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Inclusion(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Consistency(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ByIndex(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BySafeIndex(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ByIndexSV(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def History(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def HistorySV(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Health(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Reference(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SafeReference(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ZAdd(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ZScan(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ZScanSV(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SafeZAdd(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def IScan(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def IScanSV(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Dump(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateDatabase(self, request, context):
        """todo(joe-dz): Enable restore when the feature is required again
        	rpc Restore(stream pb.KVList) returns (ItemsCount) {
        		option (google.api.http) = {
        			post: "/v1/immurestproxy/restore"
        			body: "*"
        		};
        	}
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UseDatabase(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ChangePermission(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetActiveUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DatabaseList(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ImmuServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ListUsers': grpc.unary_unary_rpc_method_handler(
                    servicer.ListUsers,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=schema__pb2.UserList.SerializeToString,
            ),
            'CreateUser': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateUser,
                    request_deserializer=schema__pb2.CreateUserRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'ChangePassword': grpc.unary_unary_rpc_method_handler(
                    servicer.ChangePassword,
                    request_deserializer=schema__pb2.ChangePasswordRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'UpdateAuthConfig': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateAuthConfig,
                    request_deserializer=schema__pb2.AuthConfig.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'UpdateMTLSConfig': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateMTLSConfig,
                    request_deserializer=schema__pb2.MTLSConfig.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'PrintTree': grpc.unary_unary_rpc_method_handler(
                    servicer.PrintTree,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=schema__pb2.Tree.SerializeToString,
            ),
            'Login': grpc.unary_unary_rpc_method_handler(
                    servicer.Login,
                    request_deserializer=schema__pb2.LoginRequest.FromString,
                    response_serializer=schema__pb2.LoginResponse.SerializeToString,
            ),
            'Logout': grpc.unary_unary_rpc_method_handler(
                    servicer.Logout,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'Set': grpc.unary_unary_rpc_method_handler(
                    servicer.Set,
                    request_deserializer=schema__pb2.KeyValue.FromString,
                    response_serializer=schema__pb2.Index.SerializeToString,
            ),
            'SetSV': grpc.unary_unary_rpc_method_handler(
                    servicer.SetSV,
                    request_deserializer=schema__pb2.StructuredKeyValue.FromString,
                    response_serializer=schema__pb2.Index.SerializeToString,
            ),
            'SafeSet': grpc.unary_unary_rpc_method_handler(
                    servicer.SafeSet,
                    request_deserializer=schema__pb2.SafeSetOptions.FromString,
                    response_serializer=schema__pb2.Proof.SerializeToString,
            ),
            'SafeSetSV': grpc.unary_unary_rpc_method_handler(
                    servicer.SafeSetSV,
                    request_deserializer=schema__pb2.SafeSetSVOptions.FromString,
                    response_serializer=schema__pb2.Proof.SerializeToString,
            ),
            'Get': grpc.unary_unary_rpc_method_handler(
                    servicer.Get,
                    request_deserializer=schema__pb2.Key.FromString,
                    response_serializer=schema__pb2.Item.SerializeToString,
            ),
            'GetSV': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSV,
                    request_deserializer=schema__pb2.Key.FromString,
                    response_serializer=schema__pb2.StructuredItem.SerializeToString,
            ),
            'SafeGet': grpc.unary_unary_rpc_method_handler(
                    servicer.SafeGet,
                    request_deserializer=schema__pb2.SafeGetOptions.FromString,
                    response_serializer=schema__pb2.SafeItem.SerializeToString,
            ),
            'SafeGetSV': grpc.unary_unary_rpc_method_handler(
                    servicer.SafeGetSV,
                    request_deserializer=schema__pb2.SafeGetOptions.FromString,
                    response_serializer=schema__pb2.SafeStructuredItem.SerializeToString,
            ),
            'SetBatch': grpc.unary_unary_rpc_method_handler(
                    servicer.SetBatch,
                    request_deserializer=schema__pb2.KVList.FromString,
                    response_serializer=schema__pb2.Index.SerializeToString,
            ),
            'SetBatchSV': grpc.unary_unary_rpc_method_handler(
                    servicer.SetBatchSV,
                    request_deserializer=schema__pb2.SKVList.FromString,
                    response_serializer=schema__pb2.Index.SerializeToString,
            ),
            'GetBatch': grpc.unary_unary_rpc_method_handler(
                    servicer.GetBatch,
                    request_deserializer=schema__pb2.KeyList.FromString,
                    response_serializer=schema__pb2.ItemList.SerializeToString,
            ),
            'GetBatchSV': grpc.unary_unary_rpc_method_handler(
                    servicer.GetBatchSV,
                    request_deserializer=schema__pb2.KeyList.FromString,
                    response_serializer=schema__pb2.StructuredItemList.SerializeToString,
            ),
            'Scan': grpc.unary_unary_rpc_method_handler(
                    servicer.Scan,
                    request_deserializer=schema__pb2.ScanOptions.FromString,
                    response_serializer=schema__pb2.ItemList.SerializeToString,
            ),
            'ScanSV': grpc.unary_unary_rpc_method_handler(
                    servicer.ScanSV,
                    request_deserializer=schema__pb2.ScanOptions.FromString,
                    response_serializer=schema__pb2.StructuredItemList.SerializeToString,
            ),
            'Count': grpc.unary_unary_rpc_method_handler(
                    servicer.Count,
                    request_deserializer=schema__pb2.KeyPrefix.FromString,
                    response_serializer=schema__pb2.ItemsCount.SerializeToString,
            ),
            'CurrentRoot': grpc.unary_unary_rpc_method_handler(
                    servicer.CurrentRoot,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=schema__pb2.Root.SerializeToString,
            ),
            'Inclusion': grpc.unary_unary_rpc_method_handler(
                    servicer.Inclusion,
                    request_deserializer=schema__pb2.Index.FromString,
                    response_serializer=schema__pb2.InclusionProof.SerializeToString,
            ),
            'Consistency': grpc.unary_unary_rpc_method_handler(
                    servicer.Consistency,
                    request_deserializer=schema__pb2.Index.FromString,
                    response_serializer=schema__pb2.ConsistencyProof.SerializeToString,
            ),
            'ByIndex': grpc.unary_unary_rpc_method_handler(
                    servicer.ByIndex,
                    request_deserializer=schema__pb2.Index.FromString,
                    response_serializer=schema__pb2.Item.SerializeToString,
            ),
            'BySafeIndex': grpc.unary_unary_rpc_method_handler(
                    servicer.BySafeIndex,
                    request_deserializer=schema__pb2.SafeIndexOptions.FromString,
                    response_serializer=schema__pb2.SafeItem.SerializeToString,
            ),
            'ByIndexSV': grpc.unary_unary_rpc_method_handler(
                    servicer.ByIndexSV,
                    request_deserializer=schema__pb2.Index.FromString,
                    response_serializer=schema__pb2.StructuredItem.SerializeToString,
            ),
            'History': grpc.unary_unary_rpc_method_handler(
                    servicer.History,
                    request_deserializer=schema__pb2.Key.FromString,
                    response_serializer=schema__pb2.ItemList.SerializeToString,
            ),
            'HistorySV': grpc.unary_unary_rpc_method_handler(
                    servicer.HistorySV,
                    request_deserializer=schema__pb2.Key.FromString,
                    response_serializer=schema__pb2.StructuredItemList.SerializeToString,
            ),
            'Health': grpc.unary_unary_rpc_method_handler(
                    servicer.Health,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=schema__pb2.HealthResponse.SerializeToString,
            ),
            'Reference': grpc.unary_unary_rpc_method_handler(
                    servicer.Reference,
                    request_deserializer=schema__pb2.ReferenceOptions.FromString,
                    response_serializer=schema__pb2.Index.SerializeToString,
            ),
            'SafeReference': grpc.unary_unary_rpc_method_handler(
                    servicer.SafeReference,
                    request_deserializer=schema__pb2.SafeReferenceOptions.FromString,
                    response_serializer=schema__pb2.Proof.SerializeToString,
            ),
            'ZAdd': grpc.unary_unary_rpc_method_handler(
                    servicer.ZAdd,
                    request_deserializer=schema__pb2.ZAddOptions.FromString,
                    response_serializer=schema__pb2.Index.SerializeToString,
            ),
            'ZScan': grpc.unary_unary_rpc_method_handler(
                    servicer.ZScan,
                    request_deserializer=schema__pb2.ZScanOptions.FromString,
                    response_serializer=schema__pb2.ItemList.SerializeToString,
            ),
            'ZScanSV': grpc.unary_unary_rpc_method_handler(
                    servicer.ZScanSV,
                    request_deserializer=schema__pb2.ZScanOptions.FromString,
                    response_serializer=schema__pb2.StructuredItemList.SerializeToString,
            ),
            'SafeZAdd': grpc.unary_unary_rpc_method_handler(
                    servicer.SafeZAdd,
                    request_deserializer=schema__pb2.SafeZAddOptions.FromString,
                    response_serializer=schema__pb2.Proof.SerializeToString,
            ),
            'IScan': grpc.unary_unary_rpc_method_handler(
                    servicer.IScan,
                    request_deserializer=schema__pb2.IScanOptions.FromString,
                    response_serializer=schema__pb2.Page.SerializeToString,
            ),
            'IScanSV': grpc.unary_unary_rpc_method_handler(
                    servicer.IScanSV,
                    request_deserializer=schema__pb2.IScanOptions.FromString,
                    response_serializer=schema__pb2.SPage.SerializeToString,
            ),
            'Dump': grpc.unary_stream_rpc_method_handler(
                    servicer.Dump,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=schema__pb2.KVList.SerializeToString,
            ),
            'CreateDatabase': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateDatabase,
                    request_deserializer=schema__pb2.Database.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'UseDatabase': grpc.unary_unary_rpc_method_handler(
                    servicer.UseDatabase,
                    request_deserializer=schema__pb2.Database.FromString,
                    response_serializer=schema__pb2.UseDatabaseReply.SerializeToString,
            ),
            'ChangePermission': grpc.unary_unary_rpc_method_handler(
                    servicer.ChangePermission,
                    request_deserializer=schema__pb2.ChangePermissionRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'SetActiveUser': grpc.unary_unary_rpc_method_handler(
                    servicer.SetActiveUser,
                    request_deserializer=schema__pb2.SetActiveUserRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'DatabaseList': grpc.unary_unary_rpc_method_handler(
                    servicer.DatabaseList,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=schema__pb2.DatabaseListResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'immudb.schema.ImmuService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ImmuService(object):
    """option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
    	info: {
    		title: "immudb REST API";
    		description: "<b>IMPORTANT</b>: All <code>get</code> and <code>safeget</code> functions return <u>base64-encoded</u> keys and values, while all <code>set</code> and <code>safeset</code> functions expect <u>base64-encoded</u> inputs."
    	};
    	security_definitions: {
    		security: {
    			key: "bearer"
    			value: {
    				type: TYPE_API_KEY
    				in: IN_HEADER
    				name: "Authorization"
    				description: "Authentication token, prefixed by Bearer: Bearer <token>"
    			}
    		}
    	}
    	security: {
    		security_requirement: {
    			key: "bearer"
    		}
    	}
    };

    immudb gRPC & REST service
    IMPORTANT: All get and safeget functions return base64-encoded keys and values, while all set and safeset functions expect base64-encoded inputs.
    """

    @staticmethod
    def ListUsers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/immudb.schema.ImmuService/ListUsers',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            schema__pb2.UserList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/immudb.schema.ImmuService/CreateUser',
            schema__pb2.CreateUserRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ChangePassword(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/immudb.schema.ImmuService/ChangePassword',
            schema__pb2.ChangePasswordRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateAuthConfig(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/immudb.schema.ImmuService/UpdateAuthConfig',
            schema__pb2.AuthConfig.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateMTLSConfig(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/immudb.schema.ImmuService/UpdateMTLSConfig',
            schema__pb2.MTLSConfig.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PrintTree(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/immudb.schema.ImmuService/PrintTree',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            schema__pb2.Tree.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Login(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/immudb.schema.ImmuService/Login',
            schema__pb2.LoginRequest.SerializeToString,
            schema__pb2.LoginResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Logout(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/immudb.schema.ImmuService/Logout',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Set(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/immudb.schema.ImmuService/Set',
            schema__pb2.KeyValue.SerializeToString,
            schema__pb2.Index.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetSV(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/immudb.schema.ImmuService/SetSV',
            schema__pb2.StructuredKeyValue.SerializeToString,
            schema__pb2.Index.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SafeSet(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/immudb.schema.ImmuService/SafeSet',
            schema__pb2.SafeSetOptions.SerializeToString,
            schema__pb2.Proof.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SafeSetSV(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/immudb.schema.ImmuService/SafeSetSV',
            schema__pb2.SafeSetSVOptions.SerializeToString,
            schema__pb2.Proof.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Get(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/immudb.schema.ImmuService/Get',
            schema__pb2.Key.SerializeToString,
            schema__pb2.Item.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetSV(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/immudb.schema.ImmuService/GetSV',
            schema__pb2.Key.SerializeToString,
            schema__pb2.StructuredItem.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SafeGet(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/immudb.schema.ImmuService/SafeGet',
            schema__pb2.SafeGetOptions.SerializeToString,
            schema__pb2.SafeItem.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SafeGetSV(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/immudb.schema.ImmuService/SafeGetSV',
            schema__pb2.SafeGetOptions.SerializeToString,
            schema__pb2.SafeStructuredItem.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetBatch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/immudb.schema.ImmuService/SetBatch',
            schema__pb2.KVList.SerializeToString,
            schema__pb2.Index.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetBatchSV(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/immudb.schema.ImmuService/SetBatchSV',
            schema__pb2.SKVList.SerializeToString,
            schema__pb2.Index.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetBatch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/immudb.schema.ImmuService/GetBatch',
            schema__pb2.KeyList.SerializeToString,
            schema__pb2.ItemList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetBatchSV(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/immudb.schema.ImmuService/GetBatchSV',
            schema__pb2.KeyList.SerializeToString,
            schema__pb2.StructuredItemList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Scan(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/immudb.schema.ImmuService/Scan',
            schema__pb2.ScanOptions.SerializeToString,
            schema__pb2.ItemList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ScanSV(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/immudb.schema.ImmuService/ScanSV',
            schema__pb2.ScanOptions.SerializeToString,
            schema__pb2.StructuredItemList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Count(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/immudb.schema.ImmuService/Count',
            schema__pb2.KeyPrefix.SerializeToString,
            schema__pb2.ItemsCount.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CurrentRoot(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/immudb.schema.ImmuService/CurrentRoot',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            schema__pb2.Root.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Inclusion(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/immudb.schema.ImmuService/Inclusion',
            schema__pb2.Index.SerializeToString,
            schema__pb2.InclusionProof.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Consistency(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/immudb.schema.ImmuService/Consistency',
            schema__pb2.Index.SerializeToString,
            schema__pb2.ConsistencyProof.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ByIndex(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/immudb.schema.ImmuService/ByIndex',
            schema__pb2.Index.SerializeToString,
            schema__pb2.Item.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BySafeIndex(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/immudb.schema.ImmuService/BySafeIndex',
            schema__pb2.SafeIndexOptions.SerializeToString,
            schema__pb2.SafeItem.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ByIndexSV(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/immudb.schema.ImmuService/ByIndexSV',
            schema__pb2.Index.SerializeToString,
            schema__pb2.StructuredItem.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def History(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/immudb.schema.ImmuService/History',
            schema__pb2.Key.SerializeToString,
            schema__pb2.ItemList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def HistorySV(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/immudb.schema.ImmuService/HistorySV',
            schema__pb2.Key.SerializeToString,
            schema__pb2.StructuredItemList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Health(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/immudb.schema.ImmuService/Health',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            schema__pb2.HealthResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Reference(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/immudb.schema.ImmuService/Reference',
            schema__pb2.ReferenceOptions.SerializeToString,
            schema__pb2.Index.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SafeReference(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/immudb.schema.ImmuService/SafeReference',
            schema__pb2.SafeReferenceOptions.SerializeToString,
            schema__pb2.Proof.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ZAdd(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/immudb.schema.ImmuService/ZAdd',
            schema__pb2.ZAddOptions.SerializeToString,
            schema__pb2.Index.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ZScan(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/immudb.schema.ImmuService/ZScan',
            schema__pb2.ZScanOptions.SerializeToString,
            schema__pb2.ItemList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ZScanSV(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/immudb.schema.ImmuService/ZScanSV',
            schema__pb2.ZScanOptions.SerializeToString,
            schema__pb2.StructuredItemList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SafeZAdd(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/immudb.schema.ImmuService/SafeZAdd',
            schema__pb2.SafeZAddOptions.SerializeToString,
            schema__pb2.Proof.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def IScan(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/immudb.schema.ImmuService/IScan',
            schema__pb2.IScanOptions.SerializeToString,
            schema__pb2.Page.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def IScanSV(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/immudb.schema.ImmuService/IScanSV',
            schema__pb2.IScanOptions.SerializeToString,
            schema__pb2.SPage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Dump(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/immudb.schema.ImmuService/Dump',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            schema__pb2.KVList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateDatabase(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/immudb.schema.ImmuService/CreateDatabase',
            schema__pb2.Database.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UseDatabase(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/immudb.schema.ImmuService/UseDatabase',
            schema__pb2.Database.SerializeToString,
            schema__pb2.UseDatabaseReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ChangePermission(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/immudb.schema.ImmuService/ChangePermission',
            schema__pb2.ChangePermissionRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetActiveUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/immudb.schema.ImmuService/SetActiveUser',
            schema__pb2.SetActiveUserRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DatabaseList(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/immudb.schema.ImmuService/DatabaseList',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            schema__pb2.DatabaseListResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
